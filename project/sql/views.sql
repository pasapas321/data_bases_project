--Статистика заказов (для каждого заказчика выводим количество заказанных им мероприятий и среднюю сумму, которую он тратит на мероприятие)--

CREATE OR REPLACE VIEW ORDER_STAT AS
    SELECT CUSTOMER.CUSTOMER_ID, NAME, SURNAME,
           COUNT(EVENT_ID) AS CNT, AVG(SUM) AS AVG_SUM
    FROM BANQUETS.EVENT
    INNER JOIN BANQUETS.CUSTOMER
    ON EVENT.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID
    GROUP BY CUSTOMER.CUSTOMER_ID, NAME, SURNAME
    ORDER BY CUSTOMER.CUSTOMER_ID;

--Среднее количество гостей на мероприятии на 1 и 2 этажах соответственно--

CREATE OR REPLACE VIEW GUESTS_FLOOR AS
    SELECT FLOOR, ROUND(AVG(GUESTS_NUMBER), 0) AS GUESTS
    FROM BANQUETS.EVENT
    GROUP BY FLOOR;

--Средняя стоимость каждого типа блюда (общего, салата, первого и второго горячих)--
CREATE OR REPLACE VIEW AVG_DISH_COST AS
    SELECT DISH_TYPE, ROUND(AVG(AVG_CT), 0) AS AVG_COST
    FROM
    (SELECT EVENT.EVENT_ID, DISH_TYPE,
           AVG(COST) AS AVG_CT
    FROM ((BANQUETS.EVENT
    INNER JOIN BANQUETS.TABLE
    ON EVENT.EVENT_ID = BANQUETS.TABLE.EVENT_ID)
    INNER JOIN BANQUETS.TABLE_X_DISH
    ON BANQUETS.TABLE.TABLE_ID = TABLE_X_DISH.TABLE_ID)
    INNER JOIN BANQUETS.DISH
    ON TABLE_X_DISH.DISH_ID = DISH.DISH_ID
    GROUP BY EVENT.EVENT_ID, DISH_TYPE
    ORDER BY EVENT.EVENT_ID) T
    GROUP BY DISH_TYPE;

--Неоплаченные на данный момент заказы--

CREATE OR REPLACE VIEW UNPAID AS
    SELECT EVENT_ID, PAYMENT_STATUS
    FROM BANQUETS.EVENT
    WHERE  PAYMENT_STATUS = FALSE;

--Сокрытие номера телефона у сотрудников--

CREATE OR REPLACE VIEW EMPL AS
    SELECT NAME, SURNAME, EMPLOYEE_TYPE,
           CREATE_MASK(PHONE_NUMBER)
    FROM BANQUETS.EMPLOYEE;

--Сокрытие номера телефона у заказчиков--

CREATE OR REPLACE VIEW CUST AS
    SELECT NAME, SURNAME,
           CREATE_MASK(PHONE_NUMBER)
    FROM BANQUETS.CUSTOMER;

